<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20204.21.0114.0916                               -->
<workbook original-version='18.1' source-build='2020.4.1 (20204.21.0114.0916)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='result' inline='true' name='federated.0jb60kj0b480uh17nmgml09yjob6' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='result' name='textscan.12d1qec09446v1187sw1k13987do'>
            <connection class='textclean' cleaning='yes' compat='no' csvFile='C:/Users/etang7/Documents/590-cities/result.csv' dataRefreshTime='' directory='C:/Users/etang7/Documents/590-cities/Data' filename='C:/Users/etang7/AppData/Local/Temp/TableauTemp/19r9gap1m7atgp15n58ls1agdyfh/result.csv.xlsx' interpretationMode='8' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.12d1qec09446v1187sw1k13987do' name='result.csv' table='[result#csv$]' type='table'>
          <columns character-set='UTF-8' gridOrigin='A1:K111:no:A1:K111:1' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='integer' name='Rank' ordinal='1' />
            <column datatype='string' name='City' ordinal='2' />
            <column datatype='real' name='Cost of Living Index' ordinal='3' />
            <column datatype='real' name='Rent Index' ordinal='4' />
            <column datatype='real' name='Cost of Living Plus Rent Index' ordinal='5' />
            <column datatype='real' name='Groceries Index' ordinal='6' />
            <column datatype='real' name='Restaurant Price Index' ordinal='7' />
            <column datatype='real' name='Local Purchasing Power Index' ordinal='8' />
            <column datatype='string' name='Country' ordinal='9' />
            <column datatype='string' name='State' ordinal='10' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.12d1qec09446v1187sw1k13987do' name='result.csv' table='[result#csv$]' type='table'>
          <columns character-set='UTF-8' gridOrigin='A1:K111:no:A1:K111:1' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='integer' name='Rank' ordinal='1' />
            <column datatype='string' name='City' ordinal='2' />
            <column datatype='real' name='Cost of Living Index' ordinal='3' />
            <column datatype='real' name='Rent Index' ordinal='4' />
            <column datatype='real' name='Cost of Living Plus Rent Index' ordinal='5' />
            <column datatype='real' name='Groceries Index' ordinal='6' />
            <column datatype='real' name='Restaurant Price Index' ordinal='7' />
            <column datatype='real' name='Local Purchasing Power Index' ordinal='8' />
            <column datatype='string' name='Country' ordinal='9' />
            <column datatype='string' name='State' ordinal='10' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[result.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>2</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:K111:no:A1:K111:1&quot;</attribute>
              <attribute datatype='integer' name='lost'>0</attribute>
              <attribute datatype='integer' name='outcome'>1</attribute>
              <attribute datatype='integer' name='processed'>880</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rank</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Rank]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Rank</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Cost of Living Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Cost of Living Index]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Cost of Living Index</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rent Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Rent Index]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Rent Index</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Cost of Living Plus Rent Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Cost of Living Plus Rent Index]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Cost of Living Plus Rent Index</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Groceries Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Groceries Index]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Groceries Index</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Restaurant Price Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Restaurant Price Index]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Restaurant Price Index</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Local Purchasing Power Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Local Purchasing Power Index]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Local Purchasing Power Index</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column datatype='real' name='[Cost of Living Index]' role='measure' type='quantitative' />
      <column datatype='real' name='[Cost of Living Plus Rent Index]' role='measure' type='quantitative' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[F1]' role='measure' type='quantitative' />
      <column datatype='real' name='[Groceries Index]' role='measure' type='quantitative' />
      <column datatype='real' name='[Local Purchasing Power Index]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Rank]' role='measure' type='quantitative' />
      <column datatype='real' name='[Rent Index]' role='measure' type='quantitative' />
      <column datatype='real' name='[Restaurant Price Index]' role='measure' type='quantitative' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='result.csv' datatype='table' name='[__tableau_internal_object_id__].[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]' role='measure' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:result.csv_4D2F7406BCB24DD1B8287691D6A198D1:qk]' pivot='key' type='quantitative' />
      <column-instance column='[City Set]' derivation='InOut' name='[io:City Set:nk]' pivot='key' type='nominal' />
      <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
      <column-instance column='[Cost of Living Index]' derivation='Sum' name='[sum:Cost of Living Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Cost of Living Plus Rent Index]' derivation='Sum' name='[sum:Cost of Living Plus Rent Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[F1]' derivation='Sum' name='[sum:F1:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Groceries Index]' derivation='Sum' name='[sum:Groceries Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Local Purchasing Power Index]' derivation='Sum' name='[sum:Local Purchasing Power Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Rank]' derivation='Sum' name='[sum:Rank:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Rent Index]' derivation='Sum' name='[sum:Rent Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Restaurant Price Index]' derivation='Sum' name='[sum:Restaurant Price Index:qk]' pivot='key' type='quantitative' />
      <group caption='Interested Cities' name='[City Set]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
          <groupfilter function='member' level='[City]' member='&quot;Austin&quot;' />
          <groupfilter function='member' level='[City]' member='&quot;Boston&quot;' />
          <groupfilter function='member' level='[City]' member='&quot;Chicago&quot;' />
          <groupfilter function='member' level='[City]' member='&quot;Dallas&quot;' />
          <groupfilter function='member' level='[City]' member='&quot;Houston&quot;' />
          <groupfilter function='member' level='[City]' member='&quot;Los Angeles&quot;' />
          <groupfilter function='member' level='[City]' member='&quot;New York&quot;' />
          <groupfilter function='member' level='[City]' member='&quot;Peoria&quot;' />
        </groupfilter>
      </group>
      <drill-paths>
        <drill-path name='Country, State, City'>
          <field>[Country]</field>
          <field>[State]</field>
          <field>[City]</field>
        </drill-path>
      </drill-paths>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:City:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Asheville&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Everett&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Indianapolis&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Raleigh&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;San Antonio&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Wichita&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Austin&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Charleston&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Fresno&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lubbock&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Richmond&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Tampa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cincinnati&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hartford&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Houston&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Milwaukee&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Saint Paul&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Vancouver&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Dallas&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Baltimore&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Detroit&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kansas City&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Orlando&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Santa Barbara&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Atlanta&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Dayton&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Irvine&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Oakland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;San Diego&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Anchorage&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cleveland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Honolulu&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Minneapolis&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saint Petersburg&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Virginia Beach&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Buffalo&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Fort Wayne&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Portland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tacoma&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albany&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Charlotte&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gainesville&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Madison&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Rochester&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Toledo&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Boulder&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Fayetteville&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;New York&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pittsburgh&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Springfield&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ann Arbor&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Columbia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Little Rock&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nashville&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Salem&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Washington&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bellevue&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Birmingham&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Knoxville&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Reno&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Santa Rosa&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bellingham&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Boise&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Las Vegas&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Philadelphia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Seattle&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Brooklyn&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Fort Myers&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Long Beach&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Syracuse&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Burlington&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Fort Worth&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Louisville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tallahassee&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Chicago&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Denver&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jacksonville&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Oklahoma City&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;San Francisco&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Los Angeles&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Arlington&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Columbus&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Huntsville&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Orleans&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Salt Lake City&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;West Palm Beach&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Boston&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chattanooga&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Grand Rapids&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Memphis&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sacramento&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tucson&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Berkeley&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;El Paso&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lexington&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Phoenix&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Spokane&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bakersfield&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Des Moines&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jersey City&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Olympia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;San Jose&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Peoria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Albuquerque&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eugene&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Greensboro&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Miami&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Saint Louis&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tulsa&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[io:City Set:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>true</bucket>
            </map>
            <map to='#dcd4d0'>
              <bucket>false</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Cost of Living Index:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Cost of Living Plus Rent Index:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Restaurant Price Index:qk]&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:F1:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Calculation_800514837127700480:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Rank:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Rent Index:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Local Purchasing Power Index:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Groceries Index:qk]&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[__tableau_internal_object_id__].[cnt:result.csv_4D2F7406BCB24DD1B8287691D6A198D1:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='result.csv' id='result.csv_4D2F7406BCB24DD1B8287691D6A198D1'>
            <properties context=''>
              <relation connection='textscan.12d1qec09446v1187sw1k13987do' name='result.csv' table='[result#csv$]' type='table'>
                <columns character-set='UTF-8' gridOrigin='A1:K111:no:A1:K111:1' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='integer' name='Rank' ordinal='1' />
                  <column datatype='string' name='City' ordinal='2' />
                  <column datatype='real' name='Cost of Living Index' ordinal='3' />
                  <column datatype='real' name='Rent Index' ordinal='4' />
                  <column datatype='real' name='Cost of Living Plus Rent Index' ordinal='5' />
                  <column datatype='real' name='Groceries Index' ordinal='6' />
                  <column datatype='real' name='Restaurant Price Index' ordinal='7' />
                  <column datatype='real' name='Local Purchasing Power Index' ordinal='8' />
                  <column datatype='string' name='Country' ordinal='9' />
                  <column datatype='string' name='State' ordinal='10' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Cost of LIving Index'>
      <table>
        <view>
          <datasources>
            <datasource caption='result' name='federated.0jb60kj0b480uh17nmgml09yjob6' />
          </datasources>
          <datasource-dependencies datasource='federated.0jb60kj0b480uh17nmgml09yjob6'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Cost of Living Index]' role='measure' type='quantitative' />
            <column-instance column='[City Set]' derivation='InOut' name='[io:City Set:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Cost of Living Index]' derivation='Sum' name='[sum:Cost of Living Index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]'>
            <groupfilter from='&quot;Albany&quot;' function='range' level='[none:City:nk]' to='&quot;Wichita&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]' />
              <lod column='[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</rows>
        <cols>[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Cost of Living Index:qk]</cols>
      </table>
      <simple-id uuid='{30D9F66E-B97A-4AA5-815D-83288CD36172}' />
    </worksheet>
    <worksheet name='Interested Cities Comparison'>
      <table>
        <view>
          <datasources>
            <datasource caption='result' name='federated.0jb60kj0b480uh17nmgml09yjob6' />
          </datasources>
          <datasource-dependencies datasource='federated.0jb60kj0b480uh17nmgml09yjob6'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Cost of Living Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Groceries Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Local Purchasing Power Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Restaurant Price Index]' role='measure' type='quantitative' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Cost of Living Index]' derivation='Sum' name='[sum:Cost of Living Index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Groceries Index]' derivation='Sum' name='[sum:Groceries Index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Local Purchasing Power Index]' derivation='Sum' name='[sum:Local Purchasing Power Index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Rent Index]' derivation='Sum' name='[sum:Rent Index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Restaurant Price Index]' derivation='Sum' name='[sum:Restaurant Price Index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0jb60kj0b480uh17nmgml09yjob6].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Cost of Living Index:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Groceries Index:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Local Purchasing Power Index:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Rent Index:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Restaurant Price Index:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0jb60kj0b480uh17nmgml09yjob6].[City Set]' />
          <manual-sort column='[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;New York&quot;</bucket>
              <bucket>&quot;Boston&quot;</bucket>
              <bucket>&quot;Austin&quot;</bucket>
              <bucket>&quot;Los Angeles&quot;</bucket>
              <bucket>&quot;Chicago&quot;</bucket>
              <bucket>&quot;Houston&quot;</bucket>
              <bucket>&quot;Dallas&quot;</bucket>
              <bucket>&quot;Peoria&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.0jb60kj0b480uh17nmgml09yjob6].[City Set]</column>
            <column>[federated.0jb60kj0b480uh17nmgml09yjob6].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0jb60kj0b480uh17nmgml09yjob6].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0jb60kj0b480uh17nmgml09yjob6].[Multiple Values]</rows>
        <cols>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</cols>
      </table>
      <simple-id uuid='{E15D5B7E-51EB-4061-8F5D-3B6F4BA3C3A3}' />
    </worksheet>
    <worksheet name='Rent Index'>
      <table>
        <view>
          <datasources>
            <datasource caption='result' name='federated.0jb60kj0b480uh17nmgml09yjob6' />
          </datasources>
          <datasource-dependencies datasource='federated.0jb60kj0b480uh17nmgml09yjob6'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Rent Index]' role='measure' type='quantitative' />
            <column-instance column='[City Set]' derivation='InOut' name='[io:City Set:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Rent Index]' derivation='Sum' name='[sum:Rent Index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]'>
            <groupfilter from='&quot;Albany&quot;' function='range' level='[none:City:nk]' to='&quot;Wichita&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</rows>
        <cols>[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Rent Index:qk]</cols>
      </table>
      <simple-id uuid='{B956DAD7-362B-443E-86A5-B308CFD38449}' />
    </worksheet>
    <worksheet name='Resturant Index'>
      <table>
        <view>
          <datasources>
            <datasource caption='result' name='federated.0jb60kj0b480uh17nmgml09yjob6' />
          </datasources>
          <datasource-dependencies datasource='federated.0jb60kj0b480uh17nmgml09yjob6'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Restaurant Price Index]' role='measure' type='quantitative' />
            <column-instance column='[City Set]' derivation='InOut' name='[io:City Set:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Restaurant Price Index]' derivation='Sum' name='[sum:Restaurant Price Index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]'>
            <groupfilter function='level-members' level='[none:City:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='height-header' value='20' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</rows>
        <cols>[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Restaurant Price Index:qk]</cols>
      </table>
      <simple-id uuid='{B7F4B776-51E4-4E77-B9A3-348255381D20}' />
    </worksheet>
    <worksheet name='United States Cities Data'>
      <table>
        <view>
          <datasources>
            <datasource caption='result' name='federated.0jb60kj0b480uh17nmgml09yjob6' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0jb60kj0b480uh17nmgml09yjob6'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Cost of Living Index]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Cost of Living Index]' derivation='Sum' name='[sum:Cost of Living Index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0jb60kj0b480uh17nmgml09yjob6].[Longitude (generated)]' field-type='quantitative' max='-6383978.4992957991' min='-19009177.337252311' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0jb60kj0b480uh17nmgml09yjob6].[Latitude (generated)]' field-type='quantitative' max='9034276.7959198728' min='2069606.3303346741' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Cost of Living Index:qk]' />
              <lod column='[federated.0jb60kj0b480uh17nmgml09yjob6].[none:Country:nk]' />
              <lod column='[federated.0jb60kj0b480uh17nmgml09yjob6].[none:State:nk]' />
              <lod column='[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0jb60kj0b480uh17nmgml09yjob6].[Latitude (generated)]</rows>
        <cols>[federated.0jb60kj0b480uh17nmgml09yjob6].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{6FCFEC06-7D17-4DCA-9928-922305FB4685}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='United States Cities Data'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Cost of Living Index:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:State:nk]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Calculation_800514837127700480:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='16' />
      </viewpoint>
      <simple-id uuid='{3450AA80-037F-401C-86BA-2F99DE46185A}' />
    </window>
    <window class='worksheet' name='Cost of LIving Index'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F153284D-C202-430D-9BCF-BD0241A97FA4}' />
    </window>
    <window class='worksheet' name='Rent Index'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4F7D7E1B-B795-4FC3-B973-C361C20057D6}' />
    </window>
    <window class='worksheet' name='Resturant Index'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C3019034-FDD7-4FB9-9AB4-F86F90240638}' />
    </window>
    <window class='worksheet' maximized='true' name='Interested Cities Comparison'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.0jb60kj0b480uh17nmgml09yjob6].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[:Measure Names]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[City Set]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Restaurant Price Index:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{92C61F23-1CB0-4A12-87FB-FFF71CE8FB12}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Cost of LIving Index' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Interested Cities Comparison' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Rent Index' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Resturant Index' width='192'>
      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
      xe+6h657nwQAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='United States Cities Data' width='192'>
      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
      YII=
    </thumbnail>
  </thumbnails>
</workbook>
