<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20204.21.0114.0916                               -->
<workbook original-version='18.1' source-build='2020.4.1 (20204.21.0114.0916)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='result' inline='true' name='federated.0jb60kj0b480uh17nmgml09yjob6' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='result' name='textscan.12d1qec09446v1187sw1k13987do'>
            <connection class='textclean' cleaning='yes' compat='no' csvFile='C:/Users/etang7/Documents/590-cities/result.csv' dataRefreshTime='' directory='C:/Users/etang7/Documents/590-cities/Data' filename='C:/Users/etang7/AppData/Local/Temp/TableauTemp/17lmh6c03gsijx16rl9um1srqe5o/result.csv.xlsx' interpretationMode='8' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.12d1qec09446v1187sw1k13987do' name='result.csv' table='[result#csv$]' type='table'>
          <columns character-set='UTF-8' gridOrigin='A1:K112:no:A1:K112:2' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='integer' name='Rank Rank' ordinal='1' />
            <column datatype='string' name='City City' ordinal='2' />
            <column datatype='real' name='Cost of Living Index Cost of Living Index' ordinal='3' />
            <column datatype='real' name='Rent Index Rent Index' ordinal='4' />
            <column datatype='real' name='Cost of Living Plus Rent Index Cost of Living Plus Rent Index' ordinal='5' />
            <column datatype='real' name='Groceries Index Groceries Index' ordinal='6' />
            <column datatype='real' name='Restaurant Price Index Restaurant Price Index' ordinal='7' />
            <column datatype='real' name='Local Purchasing Power Index Local Purchasing Power Index' ordinal='8' />
            <column datatype='string' name='Country Country' ordinal='9' />
            <column datatype='string' name='State State' ordinal='10' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.12d1qec09446v1187sw1k13987do' name='result.csv' table='[result#csv$]' type='table'>
          <columns character-set='UTF-8' gridOrigin='A1:K112:no:A1:K112:2' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='integer' name='Rank Rank' ordinal='1' />
            <column datatype='string' name='City City' ordinal='2' />
            <column datatype='real' name='Cost of Living Index Cost of Living Index' ordinal='3' />
            <column datatype='real' name='Rent Index Rent Index' ordinal='4' />
            <column datatype='real' name='Cost of Living Plus Rent Index Cost of Living Plus Rent Index' ordinal='5' />
            <column datatype='real' name='Groceries Index Groceries Index' ordinal='6' />
            <column datatype='real' name='Restaurant Price Index Restaurant Price Index' ordinal='7' />
            <column datatype='real' name='Local Purchasing Power Index Local Purchasing Power Index' ordinal='8' />
            <column datatype='string' name='Country Country' ordinal='9' />
            <column datatype='string' name='State State' ordinal='10' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[result.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>1</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:K111:no:A1:K111:1&quot;</attribute>
              <attribute datatype='integer' name='lost'>0</attribute>
              <attribute datatype='integer' name='outcome'>1</attribute>
              <attribute datatype='integer' name='processed'>880</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rank</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Rank]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Rank</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Cost of Living Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Cost of Living Index]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Cost of Living Index</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rent Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Rent Index]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Rent Index</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Cost of Living Plus Rent Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Cost of Living Plus Rent Index]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Cost of Living Plus Rent Index</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Groceries Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Groceries Index]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Groceries Index</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Restaurant Price Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Restaurant Price Index]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Restaurant Price Index</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Local Purchasing Power Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Local Purchasing Power Index]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Local Purchasing Power Index</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[result.csv]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column datatype='real' name='[Cost of Living Index]' role='measure' type='quantitative' />
      <column datatype='real' name='[Cost of Living Plus Rent Index]' role='measure' type='quantitative' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[F1]' role='measure' type='quantitative' />
      <column datatype='real' name='[Groceries Index]' role='measure' type='quantitative' />
      <column datatype='real' name='[Local Purchasing Power Index]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Rank]' role='measure' type='quantitative' />
      <column datatype='real' name='[Rent Index]' role='measure' type='quantitative' />
      <column datatype='real' name='[Restaurant Price Index]' role='measure' type='quantitative' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='result.csv' datatype='table' name='[__tableau_internal_object_id__].[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]' role='measure' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[result.csv_4D2F7406BCB24DD1B8287691D6A198D1]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:result.csv_4D2F7406BCB24DD1B8287691D6A198D1:qk]' pivot='key' type='quantitative' />
      <column-instance column='[City Set]' derivation='InOut' name='[io:City Set:nk]' pivot='key' type='nominal' />
      <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
      <column-instance column='[Cost of Living Index]' derivation='Sum' name='[sum:Cost of Living Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Cost of Living Plus Rent Index]' derivation='Sum' name='[sum:Cost of Living Plus Rent Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[F1]' derivation='Sum' name='[sum:F1:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Groceries Index]' derivation='Sum' name='[sum:Groceries Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Local Purchasing Power Index]' derivation='Sum' name='[sum:Local Purchasing Power Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Rank]' derivation='Sum' name='[sum:Rank:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Rent Index]' derivation='Sum' name='[sum:Rent Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Restaurant Price Index]' derivation='Sum' name='[sum:Restaurant Price Index:qk]' pivot='key' type='quantitative' />
      <group caption='Interested Cities' name='[City Set]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
          <groupfilter function='member' level='[City]' member='&quot;Austin&quot;' />
          <groupfilter function='member' level='[City]' member='&quot;Boston&quot;' />
          <groupfilter function='member' level='[City]' member='&quot;Chicago&quot;' />
          <groupfilter function='member' level='[City]' member='&quot;Dallas&quot;' />
          <groupfilter function='member' level='[City]' member='&quot;Houston&quot;' />
          <groupfilter function='member' level='[City]' member='&quot;Los Angeles&quot;' />
          <groupfilter function='member' level='[City]' member='&quot;New York&quot;' />
          <groupfilter function='member' level='[City]' member='&quot;Peoria&quot;' />
        </groupfilter>
      </group>
      <drill-paths>
        <drill-path name='Country, State, City'>
          <field>[Country]</field>
          <field>[State]</field>
          <field>[City]</field>
        </drill-path>
      </drill-paths>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[io:City Set:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>true</bucket>
            </map>
            <map to='#dcd4d0'>
              <bucket>false</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:City:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Asheville&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Everett&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Indianapolis&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Raleigh&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;San Antonio&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Wichita&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Austin&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Charleston&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Fresno&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lubbock&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Richmond&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Tampa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cincinnati&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hartford&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Houston&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Milwaukee&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Saint Paul&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Vancouver&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Dallas&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Baltimore&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Detroit&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kansas City&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Orlando&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Santa Barbara&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Atlanta&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Dayton&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Irvine&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Oakland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;San Diego&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Anchorage&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cleveland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Honolulu&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Minneapolis&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saint Petersburg&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Virginia Beach&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Buffalo&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Fort Wayne&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Portland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tacoma&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albany&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Charlotte&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gainesville&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Madison&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Rochester&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Toledo&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Boulder&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Fayetteville&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;New York&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pittsburgh&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Springfield&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ann Arbor&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Columbia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Little Rock&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nashville&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Salem&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Washington&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bellevue&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Birmingham&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Knoxville&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Reno&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Santa Rosa&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bellingham&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Boise&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Las Vegas&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Philadelphia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Seattle&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Brooklyn&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Fort Myers&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Long Beach&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Syracuse&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Burlington&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Fort Worth&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Louisville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tallahassee&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Chicago&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Denver&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jacksonville&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Oklahoma City&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;San Francisco&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Los Angeles&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Arlington&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Columbus&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Huntsville&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Orleans&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Salt Lake City&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;West Palm Beach&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Boston&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chattanooga&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Grand Rapids&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Memphis&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sacramento&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tucson&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Berkeley&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;El Paso&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lexington&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Phoenix&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Spokane&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bakersfield&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Des Moines&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jersey City&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Olympia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;San Jose&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Peoria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Albuquerque&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eugene&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Greensboro&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Miami&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Saint Louis&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tulsa&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Cost of Living Index:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Cost of Living Plus Rent Index:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Restaurant Price Index:qk]&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:F1:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Calculation_800514837127700480:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Rank:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Rent Index:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Local Purchasing Power Index:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Groceries Index:qk]&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[__tableau_internal_object_id__].[cnt:result.csv_4D2F7406BCB24DD1B8287691D6A198D1:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='result.csv' id='result.csv_4D2F7406BCB24DD1B8287691D6A198D1'>
            <properties context=''>
              <relation connection='textscan.12d1qec09446v1187sw1k13987do' name='result.csv' table='[result#csv$]' type='table'>
                <columns character-set='UTF-8' gridOrigin='A1:K112:no:A1:K112:2' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='integer' name='Rank Rank' ordinal='1' />
                  <column datatype='string' name='City City' ordinal='2' />
                  <column datatype='real' name='Cost of Living Index Cost of Living Index' ordinal='3' />
                  <column datatype='real' name='Rent Index Rent Index' ordinal='4' />
                  <column datatype='real' name='Cost of Living Plus Rent Index Cost of Living Plus Rent Index' ordinal='5' />
                  <column datatype='real' name='Groceries Index Groceries Index' ordinal='6' />
                  <column datatype='real' name='Restaurant Price Index Restaurant Price Index' ordinal='7' />
                  <column datatype='real' name='Local Purchasing Power Index Local Purchasing Power Index' ordinal='8' />
                  <column datatype='string' name='Country Country' ordinal='9' />
                  <column datatype='string' name='State State' ordinal='10' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Cost of LIving Index'>
      <table>
        <view>
          <datasources>
            <datasource caption='result' name='federated.0jb60kj0b480uh17nmgml09yjob6' />
          </datasources>
          <datasource-dependencies datasource='federated.0jb60kj0b480uh17nmgml09yjob6'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Cost of Living Index]' role='measure' type='quantitative' />
            <column-instance column='[City Set]' derivation='InOut' name='[io:City Set:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Cost of Living Index]' derivation='Sum' name='[sum:Cost of Living Index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]'>
            <groupfilter from='&quot;Albany&quot;' function='range' level='[none:City:nk]' to='&quot;Wichita&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]' />
              <lod column='[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</rows>
        <cols>[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Cost of Living Index:qk]</cols>
      </table>
      <simple-id uuid='{30D9F66E-B97A-4AA5-815D-83288CD36172}' />
    </worksheet>
    <worksheet name='Interested Cities Comparison'>
      <table>
        <view>
          <datasources>
            <datasource caption='result' name='federated.0jb60kj0b480uh17nmgml09yjob6' />
          </datasources>
          <datasource-dependencies datasource='federated.0jb60kj0b480uh17nmgml09yjob6'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Cost of Living Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Groceries Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Local Purchasing Power Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rent Index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Restaurant Price Index]' role='measure' type='quantitative' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Cost of Living Index]' derivation='Sum' name='[sum:Cost of Living Index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Groceries Index]' derivation='Sum' name='[sum:Groceries Index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Local Purchasing Power Index]' derivation='Sum' name='[sum:Local Purchasing Power Index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Rent Index]' derivation='Sum' name='[sum:Rent Index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Restaurant Price Index]' derivation='Sum' name='[sum:Restaurant Price Index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0jb60kj0b480uh17nmgml09yjob6].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Cost of Living Index:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Groceries Index:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Local Purchasing Power Index:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Rent Index:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Restaurant Price Index:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0jb60kj0b480uh17nmgml09yjob6].[City Set]' />
          <manual-sort column='[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;New York&quot;</bucket>
              <bucket>&quot;Boston&quot;</bucket>
              <bucket>&quot;Austin&quot;</bucket>
              <bucket>&quot;Los Angeles&quot;</bucket>
              <bucket>&quot;Chicago&quot;</bucket>
              <bucket>&quot;Houston&quot;</bucket>
              <bucket>&quot;Dallas&quot;</bucket>
              <bucket>&quot;Peoria&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.0jb60kj0b480uh17nmgml09yjob6].[City Set]</column>
            <column>[federated.0jb60kj0b480uh17nmgml09yjob6].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0jb60kj0b480uh17nmgml09yjob6].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0jb60kj0b480uh17nmgml09yjob6].[Multiple Values]</rows>
        <cols>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</cols>
      </table>
      <simple-id uuid='{E15D5B7E-51EB-4061-8F5D-3B6F4BA3C3A3}' />
    </worksheet>
    <worksheet name='Rent Index'>
      <table>
        <view>
          <datasources>
            <datasource caption='result' name='federated.0jb60kj0b480uh17nmgml09yjob6' />
          </datasources>
          <datasource-dependencies datasource='federated.0jb60kj0b480uh17nmgml09yjob6'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Rent Index]' role='measure' type='quantitative' />
            <column-instance column='[City Set]' derivation='InOut' name='[io:City Set:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Rent Index]' derivation='Sum' name='[sum:Rent Index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]'>
            <groupfilter from='&quot;Albany&quot;' function='range' level='[none:City:nk]' to='&quot;Wichita&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</rows>
        <cols>[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Rent Index:qk]</cols>
      </table>
      <simple-id uuid='{B956DAD7-362B-443E-86A5-B308CFD38449}' />
    </worksheet>
    <worksheet name='Resturant Index'>
      <table>
        <view>
          <datasources>
            <datasource caption='result' name='federated.0jb60kj0b480uh17nmgml09yjob6' />
          </datasources>
          <datasource-dependencies datasource='federated.0jb60kj0b480uh17nmgml09yjob6'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Restaurant Price Index]' role='measure' type='quantitative' />
            <column-instance column='[City Set]' derivation='InOut' name='[io:City Set:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Restaurant Price Index]' derivation='Sum' name='[sum:Restaurant Price Index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]'>
            <groupfilter function='level-members' level='[none:City:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='height-header' value='20' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</rows>
        <cols>[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Restaurant Price Index:qk]</cols>
      </table>
      <simple-id uuid='{B7F4B776-51E4-4E77-B9A3-348255381D20}' />
    </worksheet>
    <worksheet name='United States Cities Data'>
      <table>
        <view>
          <datasources>
            <datasource caption='result' name='federated.0jb60kj0b480uh17nmgml09yjob6' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0jb60kj0b480uh17nmgml09yjob6'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Cost of Living Index]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Cost of Living Index]' derivation='Sum' name='[sum:Cost of Living Index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0jb60kj0b480uh17nmgml09yjob6].[Longitude (generated)]' field-type='quantitative' max='-6383978.4992957991' min='-19009177.337252311' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0jb60kj0b480uh17nmgml09yjob6].[Latitude (generated)]' field-type='quantitative' max='9034276.7959198728' min='2069606.3303346741' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Cost of Living Index:qk]' />
              <lod column='[federated.0jb60kj0b480uh17nmgml09yjob6].[none:Country:nk]' />
              <lod column='[federated.0jb60kj0b480uh17nmgml09yjob6].[none:State:nk]' />
              <lod column='[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0jb60kj0b480uh17nmgml09yjob6].[Latitude (generated)]</rows>
        <cols>[federated.0jb60kj0b480uh17nmgml09yjob6].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{6FCFEC06-7D17-4DCA-9928-922305FB4685}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' maximized='true' name='United States Cities Data'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:State:nk]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Calculation_800514837127700480:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='16' />
      </viewpoint>
      <simple-id uuid='{3450AA80-037F-401C-86BA-2F99DE46185A}' />
    </window>
    <window class='worksheet' name='Cost of LIving Index'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F153284D-C202-430D-9BCF-BD0241A97FA4}' />
    </window>
    <window class='worksheet' name='Rent Index'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4F7D7E1B-B795-4FC3-B973-C361C20057D6}' />
    </window>
    <window class='worksheet' name='Resturant Index'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C3019034-FDD7-4FB9-9AB4-F86F90240638}' />
    </window>
    <window class='worksheet' name='Interested Cities Comparison'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[:Measure Names]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[City Set]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[io:City Set:nk]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[none:City:nk]</field>
            <field>[federated.0jb60kj0b480uh17nmgml09yjob6].[sum:Restaurant Price Index:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{92C61F23-1CB0-4A12-87FB-FFF71CE8FB12}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Cost of LIving Index' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Interested Cities Comparison' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Rent Index' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Resturant Index' width='192'>
      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
      /wdZ53ZOA4AsIgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='United States Cities Data' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
